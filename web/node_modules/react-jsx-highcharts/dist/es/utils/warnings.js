import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";

/* eslint-disable no-console */
var titleCSS = 'color:red; font-size:20px; font-weight: bold;';

var descCSS = function descCSS(color) {
  return "font-size: 16px; color:".concat(color, ";");
};

var descDefaultCSS = descCSS('#000');
var descDefaultItalicCSS = descCSS('#000') + 'font-style:italic;';
var descKeywordCSS = descCSS('#008') + 'font-weight:600;';
var descStringCSS = descCSS('#080');
var descCommentCSS = descCSS('#808080') + 'font-style:italic;';
var descNewLine = 'font-size: 1px; margin-right: 100%;';
var moduleToImportPath = {
  annotations: 'modules/annotations',
  more: 'highcharts-more',
  threeD: 'highcharts-3d',
  bullet: 'modules/bullet',
  cylinder: 'modules/cylinder',
  dependencyWheel: 'modules/dependency-wheel',
  funnel: 'modules/funnel',
  funnel3d: 'modules/funnel3d',
  histogram: 'modules/histogram-bellcurve',
  item: 'modules/item-series',
  networkgraph: 'modules/networkgraph',
  organization: 'modules/organization',
  pareto: 'modules/pareto',
  pyramid3d: 'modules/pyramid3d',
  sankey: 'modules/sankey',
  solidgauge: 'modules/solid-gauge',
  streamgraph: 'modules/streamgraph',
  sunburst: 'modules/sunburst',
  tilemap: 'modules/tilemap',
  timeline: 'modules/timeline',
  treemap: 'modules/treemap',
  variablepie: 'modules/variable-pie',
  variwide: 'modules/variwide',
  vector: 'modules/vector',
  venn: 'modules/venn',
  windbarb: 'modules/windbarb',
  xrange: 'modules/xrange'
};
var moduleToVarName = {
  annotations: 'addAnnotations',
  more: 'addHighchartsMore',
  threeD: 'addHighcharts3DModule',
  bullet: 'addBulletModule',
  cylinder: 'addCylinderModule',
  dependencyWheel: 'addDependencyWheelModule',
  funnel: 'addFunnelModule',
  funnel3d: 'addFunnel3dModule',
  histogram: 'addHistogramBellCurveModule',
  item: 'addItemModule',
  networkgraph: 'addNetworkGraphModule',
  organization: 'addOrganizationModule',
  pareto: 'addParetoModule',
  pyramid3d: 'addPyramid3dModule',
  sankey: 'addSankeyModule',
  solidgauge: 'addSolidGaugeModule',
  streamgraph: 'addStreamGraphModule',
  sunburst: 'addSunburstModule',
  tilemap: 'addTilemapModule',
  timeline: 'addTimelineModule',
  treemap: 'addTreemapModule',
  variablepie: 'addVariablePieModule',
  variwide: 'addVariwideModule',
  vector: 'addVectorModule',
  venn: 'addVennModule',
  windbarb: 'addWindBarbModule',
  xrange: 'addXRangeModule'
};
var moduleToFeatureMap = {
  annotations: ['annotations'],
  more: ['arearange', 'areasplinerange', 'boxplot', 'bubble', 'columnrange', 'columnpyramid', 'errorbar', 'gauge', 'packedbubble', 'polygon', 'waterfall'],
  threeD: ['scatter3d', 'cylinder', 'funnel3d', 'pyramid3d'],
  bullet: ['bullet'],
  funnel: ['funnel', 'pyramid'],
  histogram: ['histogram', 'bellcurve'],
  item: ['item'],
  networkgraph: ['networkgraph'],
  pareto: ['pareto'],
  sankey: ['sankey', 'organization', 'dependencywheel'],
  solidgauge: ['solidgauge'],
  streamgraph: ['streamgraph'],
  sunburst: ['sunburst'],
  tilemap: ['tilemap'],
  timeline: ['timeline'],
  treemap: ['treemap'],
  variablepie: ['variablepie'],
  variwide: ['variwide'],
  vector: ['vector'],
  venn: ['venn'],
  windbarb: ['windbarb'],
  xrange: ['xrange'],
  // Not alphabetically for module ordering reasons
  dependencyWheel: ['dependencywheel'],
  cylinder: ['cylinder', 'funnel3d', 'pyramid3d'],
  funnel3d: ['funnel3d', 'pyramid3d'],
  organization: ['organization'],
  pyramid3d: ['pyramid3d']
};

var findModules = function findModules(feature) {
  var modules = Object.keys(moduleToFeatureMap).filter(function (key) {
    return moduleToFeatureMap[key].indexOf(feature) > -1;
  });
  if (modules.length === 0) return undefined;
  return modules;
};

var generateLines = function generateLines(modules) {
  var importLines = modules.map(function (module) {
    return "%c %cimport %c".concat(moduleToVarName[module], " %cfrom %c'highcharts/").concat(moduleToImportPath[module], "'%c;");
  });
  var applyLines = modules.map(function (module) {
    return "%c %c".concat(moduleToVarName[module], "%c(Highcharts);");
  });
  var importStyling = modules.map(function () {
    return [descNewLine, descKeywordCSS, descDefaultCSS, descKeywordCSS, descStringCSS, descDefaultCSS];
  });
  var applyStyling = modules.map(function () {
    return [descNewLine, descDefaultItalicCSS, descDefaultCSS];
  });
  return {
    importLines: importLines,
    applyLines: applyLines,
    importStyling: importStyling,
    applyStyling: applyStyling
  };
};

var logDetailedErrorMessage = function logDetailedErrorMessage(warning, modules) {
  var _ref;

  var _generateLines = generateLines(modules),
      importLines = _generateLines.importLines,
      applyLines = _generateLines.applyLines,
      importStyling = _generateLines.importStyling,
      applyStyling = _generateLines.applyStyling;

  var isMultiModule = modules.length > 1;
  console.group('React JSX Highcharts error');
  console.log("%c".concat(warning), titleCSS);
  console.log('More information: https://github.com/whawker/react-jsx-highcharts/wiki/Highcharts-error-%2317');
  console.log.apply(console, (_ref = []).concat.apply(_ref, ["You likely need to import the additional module".concat(isMultiModule ? 's' : '', ", try adding\n    %c\n    %c %cimport %cHighcharts %cfrom %c'highcharts'%c;\n    ").concat(importLines.join('\n'), "\n    %c\n    %c %c// After imports, but before component - apply additional functionality from module").concat(isMultiModule ? 's' : '', " to Highcharts\n    ").concat(applyLines.join('\n')).replace(/^ +/gm, ''), descNewLine, descNewLine, descKeywordCSS, descDefaultCSS, descKeywordCSS, descStringCSS, descDefaultCSS].concat(_toConsumableArray(importStyling), [descNewLine, descNewLine, descCommentCSS], _toConsumableArray(applyStyling))));
  console.groupEnd();
};

export var logSeriesErrorMessage = function logSeriesErrorMessage(seriesType) {
  if (process.env.NODE_ENV === 'development') {
    var warning = "This series type \"".concat(seriesType, "\" requires an additional Highcharts module");
    var modules = findModules(seriesType);

    if (!modules) {
      console.warn("".concat(warning, ", or is invalid."));
      return;
    }

    logDetailedErrorMessage(warning, modules);
  }
};
export var logModuleErrorMessage = function logModuleErrorMessage(componentName, moduleName) {
  if (process.env.NODE_ENV === 'development') {
    var warning = "This component \"".concat(componentName, "\" requires an additional Highcharts module");
    var modules = findModules(moduleName);

    if (!modules) {
      console.warn("".concat(warning, ", or is invalid."));
      return;
    }

    logDetailedErrorMessage(warning, modules);
  }
};
export var log3DModuleErrorMessage = function log3DModuleErrorMessage() {
  if (process.env.NODE_ENV === 'development') {
    logDetailedErrorMessage('3D features such as "ZAxis" require an additional Highcharts module', ['threeD']);
  }
};