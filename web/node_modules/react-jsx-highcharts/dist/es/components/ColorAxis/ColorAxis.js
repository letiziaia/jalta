import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import * as React from 'react';
import { useEffect, useRef, useState } from 'react';
import { v4 as uuid } from 'uuid';
import { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';
import ColorAxisContext from '../ColorAxisContext';
import useModifiedProps from '../UseModifiedProps';
import useChart from '../UseChart';
import createProvidedColorAxis from './createProvidedColorAxis';

var ColorAxis = function ColorAxis(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      restProps = _objectWithoutProperties(_ref, ["children"]);

  var chart = useChart();
  var colorAxisRef = useRef(null);
  var providedColorAxisRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasColorAxis = _useState2[0],
      setHasColorAxis = _useState2[1];

  useEffect(function () {
    var colorAxis = createColorAxis(chart, restProps);
    colorAxisRef.current = colorAxis;
    providedColorAxisRef.current = createProvidedColorAxis(colorAxisRef.current);
    setHasColorAxis(true);
    chart.needsRedraw();
    return function () {
      if (colorAxis && colorAxis.remove) {
        try {
          colorAxis.remove.bind(colorAxis)(false);
        } catch (_unused) {// Axis may have already been removed, i.e. when Chart unmounted
        }

        chart.needsRedraw();
      }
    };
  }, []);
  var modifiedProps = useModifiedProps(restProps);
  useEffect(function () {
    if (colorAxisRef.current !== null && modifiedProps !== false) {
      var colorAxis = colorAxisRef.current;
      colorAxis.update(modifiedProps, false);
      chart.needsRedraw();
    }
  });
  if (!hasColorAxis) return null;
  return /*#__PURE__*/React.createElement(ColorAxisContext.Provider, {
    value: providedColorAxisRef.current
  }, children);
};

var getColorAxisConfig = function getColorAxisConfig(props) {
  var _props$id = props.id,
      id = _props$id === void 0 ? uuid : _props$id,
      rest = _objectWithoutProperties(props, ["id"]);

  var colorAxisId = typeof id === 'function' ? id() : id;
  var nonEventProps = getNonEventHandlerProps(rest);
  var events = getEventsConfig(rest);
  return _objectSpread({
    id: colorAxisId,
    events: events
  }, nonEventProps);
};

var createColorAxis = function createColorAxis(chart, props) {
  var opts = getColorAxisConfig(props);
  return chart.addColorAxis(opts, false);
};

export default ColorAxis;