import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import * as React from 'react';
import { useEffect, useState, useRef } from 'react';
import PropTypes from 'prop-types';
import { v4 as uuid } from 'uuid';
import AxisContext from '../AxisContext';
import { getNonEventHandlerProps, getEventsConfig } from '../../utils/events';
import { validAxisTypes } from '../../utils/propTypeValidators';
import useModifiedProps from '../UseModifiedProps';
import useChart from '../UseChart';
import createProvidedAxis from './createProvidedAxis';

var Axis = function Axis(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$dynamicAxis = _ref.dynamicAxis,
      dynamicAxis = _ref$dynamicAxis === void 0 ? true : _ref$dynamicAxis,
      restProps = _objectWithoutProperties(_ref, ["children", "dynamicAxis"]);

  var chart = useChart();
  var axisRef = useRef(null);
  var providedAxisRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasAxis = _useState2[0],
      setHasAxis = _useState2[1];

  useEffect(function () {
    var axis = createAxis(chart, restProps, dynamicAxis);
    axisRef.current = axis;
    providedAxisRef.current = createProvidedAxis(axisRef.current);
    setHasAxis(true);
    chart.needsRedraw();
    return function () {
      if (axis.remove && dynamicAxis) {
        try {
          axis.remove.bind(axis)(false);
        } catch (_unused) {// Axis may have already been removed, i.e. when Chart unmounted
        }

        chart.needsRedraw();
      }
    };
  }, []);
  var modifiedProps = useModifiedProps(restProps);
  useEffect(function () {
    if (!hasAxis) return;

    if (modifiedProps !== false) {
      var axis = axisRef.current; // if there are plotlines or bands, the chart needs to be redrawn before
      // they can be accessed

      if (axis.plotLinesAndBands && axis.plotLinesAndBands.length > 0) {
        axis.update(modifiedProps, true);
      } else {
        axis.update(modifiedProps, false);
        chart.needsRedraw();
      }
    }
  });
  if (!hasAxis) return null;
  return /*#__PURE__*/React.createElement(AxisContext.Provider, {
    value: providedAxisRef.current
  }, children);
};

var getAxisConfig = function getAxisConfig(props) {
  var _props$id = props.id,
      id = _props$id === void 0 ? uuid : _props$id,
      rest = _objectWithoutProperties(props, ["id"]);

  var axisId = typeof id === 'function' ? id() : id;
  var nonEventProps = getNonEventHandlerProps(rest);
  var events = getEventsConfig(rest);
  return _objectSpread({
    id: axisId,
    title: {
      text: null
    },
    events: events
  }, nonEventProps);
};

var createAxis = function createAxis(chart, props, dynamicAxis) {
  var _props$id2 = props.id,
      id = _props$id2 === void 0 ? uuid : _props$id2,
      isX = props.isX; // Create Highcharts Axis

  var opts = getAxisConfig(props);
  var axis;

  if (dynamicAxis) {
    axis = chart.addAxis(opts, isX, false);
  } else {
    // ZAxis cannot be added dynamically, Maps only have a single axes - update instead
    var axisId = typeof id === 'function' ? id() : id;
    axis = chart.get(axisId);
    axis.update.call(axis, opts, false);
  }

  return axis;
};

export default Axis;