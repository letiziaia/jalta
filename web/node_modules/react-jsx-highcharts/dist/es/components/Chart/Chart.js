import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { useEffect, useRef, memo } from 'react';
import PropTypes from 'prop-types';
import { getNonEventHandlerProps } from '../../utils/events';
import useModifiedProps from '../UseModifiedProps';
import useChart from '../UseChart';
import useManualEventHandlers from '../UseManualEventHandlers';
var Chart = /*#__PURE__*/memo(function (_ref) {
  var _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'line' : _ref$type,
      width = _ref.width,
      height = _ref.height,
      restProps = _objectWithoutProperties(_ref, ["type", "width", "height"]);

  var chart = useChart();
  var mounted = useRef(false);
  var modifiedProps = useModifiedProps(_objectSpread({
    type: type
  }, restProps));
  useEffect(function () {
    if (!(width === undefined && height === undefined)) {
      chart.setSize(width, height);
    }
  }, [width, height]);
  useEffect(function () {
    if (modifiedProps !== false && mounted.current) {
      var notEventProps = getNonEventHandlerProps(modifiedProps);

      if (Object.getOwnPropertyNames(notEventProps).length > 0) {
        updateChart(modifiedProps, chart, chart.needsRedraw);
      }
    }
  });
  useEffect(function () {
    var notEventProps = getNonEventHandlerProps(_objectSpread({
      type: type
    }, restProps));
    updateChart(notEventProps, chart);
    mounted.current = true;
  }, []);
  useManualEventHandlers(restProps, chart.object);
  return null;
});

var updateChart = function updateChart(config, chart) {
  chart.update({
    chart: config
  }, false);
  chart.needsRedraw();
};

Chart.propTypes = {
  type: PropTypes.string,
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  onAddSeries: PropTypes.func,
  onAfterPrint: PropTypes.func,
  onBeforePrint: PropTypes.func,
  onClick: PropTypes.func,
  onLoad: PropTypes.func,
  onRedraw: PropTypes.func,
  onRender: PropTypes.func,
  onSelection: PropTypes.func
};
Chart.displayName = 'Chart';
export default Chart;