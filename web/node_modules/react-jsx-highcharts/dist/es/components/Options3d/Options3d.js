import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { useEffect, memo } from 'react';
import PropTypes from 'prop-types';
import { log3DModuleErrorMessage } from '../../utils/warnings';
import useHighcharts from '../UseHighcharts';
import useChart from '../UseChart';
var DEFAULT_FRAME = {
  visible: 'default',
  size: 1,
  bottom: {},
  top: {},
  left: {},
  right: {},
  back: {},
  front: {}
};
var Options3d = /*#__PURE__*/memo(function (_ref) {
  var _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? false : _ref$enabled,
      _ref$alpha = _ref.alpha,
      alpha = _ref$alpha === void 0 ? 0 : _ref$alpha,
      _ref$beta = _ref.beta,
      beta = _ref$beta === void 0 ? 0 : _ref$beta,
      _ref$depth = _ref.depth,
      depth = _ref$depth === void 0 ? 100 : _ref$depth,
      _ref$fitToPlot = _ref.fitToPlot,
      fitToPlot = _ref$fitToPlot === void 0 ? true : _ref$fitToPlot,
      _ref$viewDistance = _ref.viewDistance,
      viewDistance = _ref$viewDistance === void 0 ? 25 : _ref$viewDistance,
      _ref$axisLabelPositio = _ref.axisLabelPosition,
      axisLabelPosition = _ref$axisLabelPositio === void 0 ? 'default' : _ref$axisLabelPositio,
      _ref$frame = _ref.frame,
      frame = _ref$frame === void 0 ? DEFAULT_FRAME : _ref$frame,
      restProps = _objectWithoutProperties(_ref, ["enabled", "alpha", "beta", "depth", "fitToPlot", "viewDistance", "axisLabelPosition", "frame"]);

  var props = _objectSpread({
    enabled: enabled,
    alpha: alpha,
    beta: beta,
    depth: depth,
    fitToPlot: fitToPlot,
    viewDistance: viewDistance,
    axisLabelPosition: axisLabelPosition,
    frame: frame
  }, restProps);

  var Highcharts = useHighcharts();
  var chart = useChart();

  if (process.env.NODE_ENV === 'development') {
    if (!Highcharts.ZAxis) log3DModuleErrorMessage();
  }

  useEffect(function () {
    update3dOptions(chart, props);
  });
  return null;
});

var update3dOptions = function update3dOptions(chart, props) {
  var alpha = props.alpha,
      axisLabelPosition = props.axisLabelPosition,
      beta = props.beta,
      depth = props.depth,
      fitToPlot = props.fitToPlot,
      frame = props.frame,
      viewDistance = props.viewDistance;
  var opts = {
    chart: {
      options3d: {
        enabled: true,
        alpha: alpha,
        axisLabelPosition: axisLabelPosition,
        beta: beta,
        depth: depth,
        fitToPlot: fitToPlot,
        frame: frame,
        viewDistance: viewDistance
      }
    }
  };
  chart.update(opts, true);
};

Options3d.propTypes = {
  alpha: PropTypes.number,
  axisLabelPosition: PropTypes.string,
  beta: PropTypes.number,
  depth: PropTypes.number,
  fitToPlot: PropTypes.bool,
  frame: PropTypes.object,
  viewDistance: PropTypes.number
};
Options3d.displayName = 'Options3d';
export default Options3d;