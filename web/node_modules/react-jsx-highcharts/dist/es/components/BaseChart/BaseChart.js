import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import * as React from 'react';
import { useState, useEffect, useRef, useLayoutEffect } from 'react';
import PropTypes from 'prop-types';
import ChartContext from '../ChartContext';
import usePrevious from '../UsePrevious';
import { validChartTypes } from '../../utils/propTypeValidators';
import createProvidedChart from './createProvidedChart';

var noop = function noop(c) {
  return c;
};

var BaseChart = function BaseChart(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$callback = _ref.callback,
      callback = _ref$callback === void 0 ? noop : _ref$callback,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$containerProps = _ref.containerProps,
      containerProps = _ref$containerProps === void 0 ? null : _ref$containerProps,
      restProps = _objectWithoutProperties(_ref, ["children", "callback", "className", "containerProps"]);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      rendered = _useState2[0],
      setRendered = _useState2[1];

  var domNodeRef = useRef(null);
  var chartRef = useRef(null);
  var providedChartRef = useRef(null);
  useLayoutEffect(function () {
    var myChart = initHighcharts(restProps, domNodeRef.current);
    chartRef.current = myChart;
    providedChartRef.current = createProvidedChart(myChart, restProps.chartType);
    callback(myChart);
    setRendered(true);
  }, []);
  useEffect(function () {
    var myChart = chartRef.current;
    return function () {
      if (myChart) {
        // Fixes #14
        window.requestAnimationFrame(myChart.destroy.bind(myChart));
        myChart.__destroyed = true;
      }
    };
  }, []);
  var prevProps = usePrevious(restProps);
  useEffect(function () {
    if (!rendered) return;
    var plotOptions = restProps.plotOptions;
    var myChart = chartRef.current;

    if (Object.is(prevProps.plotOptions, plotOptions) === false && myChart) {
      myChart.update({
        plotOptions: plotOptions
      }, false);
      providedChartRef.current.needsRedraw();
    }
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, containerProps, {
    className: "chart ".concat(className),
    ref: domNodeRef
  }), rendered && /*#__PURE__*/React.createElement(ChartContext.Provider, {
    value: providedChartRef.current
  }, children));
};

var initHighcharts = function initHighcharts(props, domNode) {
  if (!domNode) {
    return;
  }

  var chartCreationFunc = props.chartCreationFunc,
      callback = props.callback,
      chart = props.chart,
      polar = props.polar,
      gauge = props.gauge,
      _props$styledMode = props.styledMode,
      styledMode = _props$styledMode === void 0 ? false : _props$styledMode,
      children = props.children,
      rest = _objectWithoutProperties(props, ["chartCreationFunc", "callback", "chart", "polar", "gauge", "styledMode", "children"]);

  var opts = _objectSpread({
    chart: _objectSpread({
      styledMode: styledMode
    }, chart),
    title: {
      text: null
    },
    subtitle: {
      text: null
    },
    legend: {
      enabled: false
    },
    rangeSelector: {
      enabled: false
    },
    navigator: {
      enabled: false
    },
    scrollbar: {
      enabled: false
    },
    tooltip: {
      enabled: false
    },
    credits: {
      enabled: false
    },
    series: [],
    xAxis: [],
    yAxis: []
  }, rest);

  var myChart = chartCreationFunc(domNode, opts);
  myChart.polar = polar;
  myChart.angular = gauge;
  return myChart;
};

export default BaseChart;